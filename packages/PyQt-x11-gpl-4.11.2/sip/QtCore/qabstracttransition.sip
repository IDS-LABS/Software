// qabstracttransition.sip generated by MetaSIP on Thu Sep 11 18:36:29 2014
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2014 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// If you are unsure which license is appropriate for your use, please
// contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QAbstractTransition : QObject
{
%TypeHeaderCode
#include <qabstracttransition.h>
%End

public:
    QAbstractTransition(QState *sourceState /TransferThis/ = 0);
    virtual ~QAbstractTransition();
    QState *sourceState() const;
    QAbstractState *targetState() const;
    void setTargetState(QAbstractState *target /KeepReference=0/);
    QList<QAbstractState*> targetStates() const;
    void setTargetStates(const QList<QAbstractState*> &targets /KeepReference=0/);
    QStateMachine *machine() const;
    void addAnimation(QAbstractAnimation *animation /GetWrapper/);
%MethodCode
        // We want to keep a reference to the animation but this is in addition to the
        // existing ones and does not replace them - so we can't use /KeepReference/.
        sipCpp->addAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = ((sipSimpleWrapper *)sipSelf)->user;
        
        if (!user)
            user = ((sipSimpleWrapper *)sipSelf)->user = PyList_New(0);
        
        if (user)
            PyList_Append(user, a0Wrapper);
%End

    void removeAnimation(QAbstractAnimation *animation /GetWrapper/);
%MethodCode
        // Discard the extra animation reference that we took in addAnimation().
        sipCpp->removeAnimation(a0);
        
        // Use the user object as a list of the references.
        PyObject *user = ((sipSimpleWrapper *)sipSelf)->user;
        
        if (user)
        {
            SIP_SSIZE_T i = 0;
            
            // Note that we deal with an object appearing in the list more than once.
            while (i < PyList_GET_SIZE(user))
                if (PyList_GET_ITEM(user, i) == a0Wrapper)
                    PyList_SetSlice(user, i, i + 1, NULL);
                else
                    ++i;
        }
%End

    QList<QAbstractAnimation*> animations() const;

signals:
    void triggered();

protected:
    virtual bool eventTest(QEvent *event) = 0;
    virtual void onTransition(QEvent *event) = 0;
    virtual bool event(QEvent *e);

private:
    QAbstractTransition(const QAbstractTransition &);
};

%End
